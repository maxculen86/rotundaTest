General terms:

-   Process will be designed under an obeserver pattern:
        ErrorObserver
        │ 
        ├── errorCatcher: return new observable error envets.
        |
        ├── logError: appends the catched error into the log file.
        |
        └── sendEmail: send via email all events with bound data.

-   erroCatcher: TimeStamp should be included.
-   Store the catched error in an incremental log file.
-   Run the sendEmail function when the error is stored at file.
-   Email function must check the timeStamp of the last email sended for the email address.
-   In order to check the timeStamp, email function have to store the data in a data base / file.

Pseudo Code:

class ErrorObserver {
    constructor() {
        this.error = [];
    }

    catcher(e) {
        this.error.push(e);
    }

    logError(error) {
        this.errorObservers.forEach((errorObservers) => errorObservers(error));
    }

    sendEmail (filePath, frecuency) {
        if (isValidRun(frecuency))
            sendErrorEmail(filePath)
    }
}

const filePath = "/dir/to/path/file/";

ErrorObserver errorObserver = new ErrorObserver();
var error = getEvent();
errorObserver.logError(error) => {
    saveFile(error);
});

function saveFile(filePath, error) {
    filePath.open();
    filePath.append(boundDataError(error));
    filePath.close();
}
function boundDataError(error) {
    return {
        content : getContent(error);
        timeStamp: getTimeStamp(error);
    }
}

function isValidRun(frecuency) {
    return checkLasTimeRunned() <= frecuency
}

function checkLasTimeRunned() {
    connectDatabase();
    return getLastfrecuencyRunned()
}